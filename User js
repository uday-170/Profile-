// Usage:
//   node scripts/create-user.js username password "Full Name" email@example.com
//
// If some args are missing, the script will prompt for them.

const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");
const readline = require("readline");

const prisma = new PrismaClient();

function ask(question) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

async function main() {
  const argv = process.argv.slice(2);
  let [username, password, name, email] = argv;

  if (!username) {
    username = (await ask("Username: ")).trim();
  }
  if (!password) {
    // For simplicity we accept plain text here; script hashes it before storing
    password = (await ask("Password: ")).trim();
  }
  if (!name) {
    name = (await ask("Full name (optional): ")).trim();
    if (name === "") name = null;
  }
  if (!email) {
    email = (await ask("Email (optional): ")).trim();
    if (email === "") email = null;
  }

  if (!username || !password) {
    console.error("username and password are required.");
    process.exit(1);
  }

  // check if user exists
  const existing = await prisma.user.findUnique({ where: { username } });
  if (existing) {
    console.error(`User with username "${username}" already exists (id=${existing.id}).`);
    await prisma.$disconnect();
    process.exit(1);
  }

  const hashed = await bcrypt.hash(password, 10);

  const user = await prisma.user.create({
    data: {
      username,
      password: hashed,
      name: name || undefined,
      email: email || undefined
    }
  });

  console.log("Created user:", { id: user.id, username: user.username, name: user.name, email: user.email });
  await prisma.$disconnect();
}

main().catch(async (e) => {
  console.error(e);
  await prisma.$disconnect();
  process.exit(1);
});
